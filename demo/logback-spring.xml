<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!--引入默认的一些设置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 定义日志文件名 -->
    <springProfile name="dev,uat,paas">
        <property name="LOG_PATH" value="/u01/abcde/logs"/>
        <property name="LOGSTASH_IP" value="xxx"/>
        <property name="LOGSTASH_PORT" value="5044"/>
        <property name="LOGSTASH_INDEX_SUFFIX" value="uat"/>
    </springProfile>
    <springProfile name="cmprd">
        <property name="LOG_PATH" value="/data/hnwy/logs"/>
        <property name="LOGSTASH_IP" value="xxx"/>
        <property name="LOGSTASH_PORT" value="5044"/>
        <property name="LOGSTASH_INDEX_SUFFIX" value="prd"/>
    </springProfile>
    <property name="LOG_FILE_NAME" value="abcde-xxxx-server"/>
    <!-- 定义最大保存时间 -->
    <property name="MAX_HISTORY" value="15"/>
    <!-- 定义每个日志的大小 -->
    <property name="MAX_FILE_SIZE" value="100MB"/>
    <!-- 定义输出格式 -->
    <property name="LOG_PATTEN" value="%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_PATTERN"
              value="${CONSOLE_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-45.45(%logger{39}:%line)){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <!--写入日志到控制台的appender-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder charset="UTF-8">
            <pattern>${CONSOLE_PATTERN}</pattern>
        </encoder>
    </appender>

        <!-- <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>5.3</version>
        </dependency> -->
    <!--写入日志到文件的appender-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名,每天一个文件-->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}-daily/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!--每个日志的大小-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTEN}</pattern>
        </encoder>
    </appender>

    <!-- 错误级别日志保存 -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}-error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!--允许打印匹配的-->
            <onMatch>ACCEPT</onMatch>
            <!--拒绝打印不匹配的-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}-daily/${LOG_FILE_NAME}-error.%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!--每个日志的大小-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>${LOG_PATTEN}</pattern>
        </encoder>
    </appender>

    <!-- 警告级别日志保存 -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}-warn.log</file>
        <!-- 日志过滤器 ThresholdFilter -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 只记录WARN及以上级别的日志. 即WARN, ERROR.  -->
            <level>WARN</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}-daily/${LOG_FILE_NAME}-warn.%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!--每个日志的大小-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${LOG_PATTEN}</pattern>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <appender name="LOGSTASH_APPENDER" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <param name="Encoding" value="UTF-8"/>
        <remoteHost>${LOGSTASH_IP}</remoteHost>
        <port>${LOGSTASH_PORT}</port>
        <!-- <filter class="com.program.interceptor.ELKFilter"/>-->//引入过滤类
        <!-- encoder is required -->
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"appname":"${LOG_FILE_NAME}-${LOGSTASH_INDEX_SUFFIX}"}</customFields>
            <includeCallerData>true</includeCallerData>
        </encoder>
    </appender>

    <!--
    logger主要用于存放日志对象，也可以定义日志类型、级别
    name：表示匹配的logger类型前缀，也就是包的前半部分
    level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
    additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
    false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <logger name="UmpClient" level="INFO"/>
    <logger name="com.huawei.it.smartdatatransfer" level="DEBUG"/>
    <logger name="org.springframework.boot" level="INFO"/>
    <logger name="org.springframework.web" level="WARN"/>
    <logger name="org.springframework.cloud" level="INFO"/>
    <logger name="org.springframework.data.mongodb.core" level="INFO"/>
    <logger name="org.quartz" level="INFO"/>
    <!--设置MyBatis日志只打印sql和参数-->
    <logger name="java.sql.Connection" level="debug" />
    <logger name="java.sql.Statement" level="debug" />
    <logger name="java.sql.PreparedStatement" level="debug" />
    <logger name="ch.qos.logback.core" level="INFO"/>
    <logger name="org.apache.commons.jexl2.JexlEngine" level="ERROR"/>
    <logger name="com.zaxxer.hikari" level="INFO"/>


    <!-- 开发环境. 多个使用逗号隔开. -->
    <springProfile name="dev,paas">
        <!-- project default level -->
        <logger name="com.abcd.gd.efg" level="DEBUG"/>
        <!--log4jdbc -->
        <root level="WARN">
            <appender-ref ref="ASYNC"/>
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="WARN"/>
            <appender-ref ref="ERROR"/>
        </root>
    </springProfile>
    <!-- 测试环境. 多个使用逗号隔开. -->
    <springProfile name="uat">
        <!-- project default level -->
        <logger name="com.abcd.gd.efg" level="DEBUG"/>
        <!--log4jdbc -->
        <root level="WARN">
            <appender-ref ref="ASYNC"/>
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="WARN"/>
            <appender-ref ref="ERROR"/>
            <appender-ref ref="LOGSTASH_APPENDER"/>
        </root>
    </springProfile>

    <!--生产环境:打印控制台和输出到文件-->
    <springProfile name="cmprd">
        <logger name="com.abcd.gd.efg" level="INFO"/>
        <root level="WARN">
            <appender-ref ref="ASYNC"/>
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="WARN"/>
            <appender-ref ref="ERROR"/>
            <appender-ref ref="LOGSTASH_APPENDER"/>
        </root>
    </springProfile>

</configuration>
